Index: backend/routes/adminRoutes.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const express = require('express');\nconst User = require('../models/user');\nconst { authenticateJWT } = require('../middleware/authenticateToken');\nconst { isAdmin } = require('../middleware/roleMiddleware');\n\nconst router = express.Router();\n\n// S'assurer que la requête est d'abord passée par authenticateJWT puis par isAdmin.\n\n// 3 routes dans le fichier\n\n// Route pour afficher la liste des utilisateurs avec pagination\n\nrouter.get('/backoffice/users', authenticateJWT, isAdmin, async (req, res) => {\n\n    // ajouter des paramètres de requête pour la page et la limite, avec des valeurs par défaut si elles ne sont pas fournies\n    const page = parseInt(req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 10;\n    const offset = (page - 1) * limit;\n\n    try {\n        // On ne renvoit pas tous les utilisateurs, on pagine les résultats\n        const users = await User.findAndCountAll({\n            attributes: ['id', 'email', 'first_name', 'last_name', 'user_type'],\n            limit: limit,\n            offset: offset\n           // where: {\n                // On peut ajouter des conditions ici si nécessaire\n            //}\n        });\n\n        const totalPages = Math.ceil(users.count / limit);\n\n        // J'envoie la réponse avec les utilisateurs\n        res.json({\n            users: users.rows,\n            totalPages: totalPages,\n            currentPage: page\n        });\n    } catch (error) {\n        console.error(error);\n        res.status(500).send({ message: \"Erreur interne du serveur.\" });\n    }\n});\n\n// Route pour obtenir les détails d'un utilisateur par ID\nrouter.get('/backoffice/users/:id', authenticateJWT, isAdmin, async (req, res) => {\n    const userId = req.params.id;\n\n    try {\n        const user = await User.findOne({\n            attributes: ['id', 'email', 'first_name', 'last_name', 'user_type'],\n            where: { id: userId }\n        });\n\n        if (!user) {\n            return res.status(404).json({ message: \"Utilisateur non trouvé.\" });\n        }\n\n        res.status(200).json(user);\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: \"Erreur interne du serveur.\" });\n    }\n});\n\n// Route pour modifier les informations d'un utilisateur par ID\n\n\nrouter.put('/backoffice/users/:id', authenticateJWT, isAdmin, async (req, res) => {\n    const userId = req.params.id;\n    const { first_name, last_name, email, user_type, password } = req.body;\n\n    try {\n        const user = await User.findOne({ where: { id: userId } });\n\n        if (!user) {\n            return res.status(404).json({ message: \"Utilisateur non trouvé.\" });\n        }\n\n        if (first_name) user.first_name = first_name;\n        if (last_name) user.last_name = last_name;\n        if (email) user.email = email;\n        if (user_type) user.user_type = user_type;\n        if (password) user.password_hash = await bcrypt.hash(password, 10);\n\n        await user.save();\n\n        res.status(200).json({\n            message: \"Utilisateur mis à jour avec succès.\",\n            user: {\n                id: user.id,\n                first_name: user.first_name,\n                last_name: user.last_name,\n                email: user.email,\n                user_type: user.user_type\n            }\n        });\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: \"Erreur interne du serveur.\" });\n    }\n});\n\n// Route pour créer un nouvel administrateur\nrouter.post('/backoffice/users/admin', authenticateJWT, isAdmin, async (req, res) => {\n    const { first_name, last_name, email, user_type, password } = req.body;\n  \n    if (!first_name || !last_name || !email || !password) {\n      return res.status(400).json({ message: \"Tous les champs obligatoires doivent être remplis.\" });\n    }\n  \n    try {\n      const existingUser = await User.findOne({ where: { email } });\n      if (existingUser) {\n        return res.status(400).json({ message: \"Un utilisateur avec cet email existe déjà.\" });\n      }\n  \n      const password_hash = await bcrypt.hash(password, 10);\n  \n      const newUser = await User.create({\n        first_name,\n        last_name,\n        email,\n        user_type,\n        password_hash,\n      });\n  \n      res.status(201).json({\n        message: \"Nouvel utilisateur créé avec succès.\",\n        user: {\n          id: newUser.id,\n          first_name: newUser.first_name,\n          last_name: newUser.last_name,\n          email: newUser.email,\n          user_type: newUser.user_type,\n        },\n      });\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Erreur interne du serveur.\" });\n    }\n  });\n\nmodule.exports = router;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/routes/adminRoutes.js b/backend/routes/adminRoutes.js
--- a/backend/routes/adminRoutes.js	
+++ b/backend/routes/adminRoutes.js	
@@ -105,41 +105,46 @@
 // Route pour créer un nouvel administrateur
 router.post('/backoffice/users/admin', authenticateJWT, isAdmin, async (req, res) => {
     const { first_name, last_name, email, user_type, password } = req.body;
-  
+
     if (!first_name || !last_name || !email || !password) {
-      return res.status(400).json({ message: "Tous les champs obligatoires doivent être remplis." });
+        return res.status(400).json({ message: "Tous les champs obligatoires doivent être remplis." });
     }
-  
+
     try {
-      const existingUser = await User.findOne({ where: { email } });
-      if (existingUser) {
-        return res.status(400).json({ message: "Un utilisateur avec cet email existe déjà." });
-      }
-  
-      const password_hash = await bcrypt.hash(password, 10);
-  
-      const newUser = await User.create({
-        first_name,
-        last_name,
-        email,
-        user_type,
-        password_hash,
-      });
-  
-      res.status(201).json({
-        message: "Nouvel utilisateur créé avec succès.",
-        user: {
-          id: newUser.id,
-          first_name: newUser.first_name,
-          last_name: newUser.last_name,
-          email: newUser.email,
-          user_type: newUser.user_type,
-        },
-      });
+        console.log('Recherche d\'utilisateur existant...');
+        const existingUser = await User.findOne({ where: { email } });
+        if (existingUser) {
+            console.log('Utilisateur existant trouvé');
+            return res.status(400).json({ message: "Un utilisateur avec cet email existe déjà." });
+        }
+
+        console.log('Hachage du mot de passe...');
+        const password_hash = await bcrypt.hash(password, 10);
+
+        console.log('Création du nouvel utilisateur...');
+        const newUser = await User.create({
+            first_name,
+            last_name,
+            email,
+            user_type,
+            password_hash,
+        });
+
+        console.log('Nouvel utilisateur créé avec succès');
+        res.status(201).json({
+            message: "Nouvel utilisateur créé avec succès.",
+            user: {
+                id: newUser.id,
+                first_name: newUser.first_name,
+                last_name: newUser.last_name,
+                email: newUser.email,
+                user_type: newUser.user_type,
+            },
+        });
     } catch (error) {
-      console.error(error);
-      res.status(500).json({ message: "Erreur interne du serveur." });
+        console.error('Erreur lors de la création de l\'utilisateur:', error);
+        res.status(500).json({ message: "Erreur interne du serveur." });
     }
-  });
+});
 
 module.exports = router;
